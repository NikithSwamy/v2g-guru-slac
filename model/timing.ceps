val time_scale = 1.0;


label V2G3_M08_01 title = "[V2G3-M08-01] all low-layer communication devices shall comply with [V2G3-M08-01-table-3].";

label V2G3_M08_01_table_3 title = "[V2G3-M08-01-table-3] Table 3 - Timing and Constant values";

label V2G3_M08_01_table_3_1 title = "[V2G3-M08-01-table-3-1] Number of retries of matching process.";
val C_conn_max_match = 3;

label V2G3_M08_01_table_3_2 title = "[V2G3-M08-01-table-3-2] Number of BCB-Toggles.";
val C_EV_vald_nb_toggles = 3;

label V2G3_M08_01_table_3_3 title = "[V2G3-M08-01-table-3-3] Number of parallel matching processes to be handled by EVSE.";
val C_EVSE_match_parallel = 5;

label V2G3_M08_01_table_3_4 title = "[V2G3-M08-01-table-3-4] Number of matching retries by Control Pilot state E transitions.";
val C_sequ_retry = 2;

label V2G3_M08_01_table_3_5 title = "[V2G3-M08-01-table-3-5] Minimum B state duration after a state F,D, or C.";
val T_conn_init_HLC = time_scale*0.2*s;
Event evT_conn_init_HLC;

label V2G3_M08_01_table_3_6 title = "[V2G3-M08-01-table-3-6] Time after the wake up trigger (e.g. BCB-Toggle) until the lowlayer communication module is ready for communication.";
val T_conn_resume = time_scale*6.0*s;
Event evT_conn_resume;

label V2G3_M08_01_table_3_7 title = "[V2G3-M08-01-table-3-7] Time after plug-in until lowlayer communication module is ready for communication.";
val T_conn_max_comm = time_scale*8.0*s;
Event evT_conn_max_comm;

label V2G3_M08_01_table_3_8 title = "[V2G3-M08-01-table-3-8] Time to resetup the matching process after a loss of communication.";
val T_conn_resetup = time_scale*15.0*s;
Event evT_conn_resetup;

label V2G3_M08_01_table_3_9 title = "[V2G3-M08-01-table-3-9] Time to detect a variation of the state on EVSE side.";
val T_vald_detect_time = time_scale*0.2*s;
Event evT_vald_detect_time;

label V2G3_M08_01_table_3_10 title = "[V2G3-M08-01-table-3-10] Duration of each state B or C within the BCB-Toggle.";
val TP_EV_vald_state_duration = time_scale*0.2*s;
Event evTP_EV_vald_state_duration;

label V2G3_M08_01_table_3_11 title = "[V2G3-M08-01-table-3-11] Duration of BCB-Toggle sequence.";
val TP_EV_vald_toggle = time_scale*0.6*s;
Event evTP_EV_vald_toggle_timeout;

label V2G3_M08_01_table_3_12 title = "[V2G3-M08-01-table-3-12] Timeout timer for the EVSE to stop monitoring control pilot for BCB-Toggle Value comes from CM_VALIDATE.REQ.";
val TP_EVSE_vald_toggle = time_scale*3.5*s;
Event evTP_EVSE_vald_toggle_timeout;

label V2G3_M08_01_table_3_13 title = "[V2G3-M08-01-table-3-13] Maximum time to leave the logical network.";
val TP_match_leave = time_scale*1.0*s;
Event evTP_match_leave_timeout;

label V2G3_M08_01_table_3_14 title = "[V2G3-M08-01-table-3-14] Time to stay at E/F state.";
val T_step_EF = time_scale*4.0*s;
Event evT_step_EF_timeout;


label V2G3_A08_01 title = "Timings and Constants";

label table_a_1_1 title = "Number of M-Sounds sent for the SLAC.";
val C_EV_match_MNBC = 10;

label table_a_1_2 title = "Number of retries of the corresponding message within the matching process.";
val C_EV_match_retry = 2;

label table_a_1_3 title = "Lower threshold for the signal strength measurement.";
val C_EV_match_signalattn_direct = 10.0;

label table_a_1_4 title = "Higher threshold for the signal strength measuremenet.";
val C_EV_match_signalattn_indirect = 20.0;

label table_a_1_5 title = "Number of CM_START_ATTEN_CHAR.INDs sent by the EV.";
val C_EV_start_atten_char_inds = 3;

label table_a_1_6 title = "Performance timer for the start of an AMP MAP Exchange. Either the EV or the EVSE shall send a CM_AMP_MAP.REQ within the\
 max value of this timer after link is detected in order to trigger an AMP MAP Exchange.";
val TP_amp_map_exchange = time_scale*0.1*s;
Event evTP_amp_map_exchange_timeout;

label table_a_1_6 title = "Number of CM_START_ATTEN_CHAR.INDs sent by the EV.";
val TP_EV_batch_msg_interval = time_scale*0.05*s;
Event evTP_EV_batch_msg_interval_timeout;

label table_a_1_7 title = "Performance timer for the EV to start validation or SLAC_MATCH after sending CM_ATTEN_CHAR.RSP.";
val TP_EV_match_session = time_scale*0.5*s;
Event evTP_EV_match_session;

label table_a_1_8 title = "Time between plug-in(state B detected) or wake-up and start of matching by the EV.";
val TP_EV_SLAC_init = time_scale*10.0 * s;
Event evTP_EV_SLAC_init_timeout;

label table_a_1_9 title = "Performance time for the EVSE to calculate the average attenuation profile after reception of all M-SOUNDs or after TT_EVSE_match_MNBC has expired.";
val TP_EVSE_avg_atten_calc = time_scale*0.1*s;
Event evTP_EVSE_avg_atten_calc_timeout;

label table_a_1_10 title = "";
val TP_link_ready_notification = time_scale*1.0*s;
Event evTP_link_ready_notification_timeout;

label table_a_1_11 title = "General performance time for a response to a request.";
val TP_match_response = time_scale*0.1*s; 
Event evTP_match_response_timeout;

label table_a_1_12 title = "General performance time for subsequent requests after a response to a previous request has been received.";
val TP_match_sequence = time_scale*0.1*s;
Event evTP_match_sequence_timeout;

label table_a_1_13 title = "Timeout timer that runs on both EV and EVSE side after link is detected. If an EV or EVSE does not want to start an AMP MAP Exchange and no request is received by the other side within the timeout\
 value of this timer, then it is to be assumed that no AMP MAP Exchange will take place and a D-LINK_READY.indication is to be sent to the HLE.";
val TT_amp_map_exchange = time_scale*0.2*s;
Event evTT_amp_map_exchange_timeout;

label table_a_1_14 title = "Time the EV shall wait for CM_ATTEN_CHAR.INFD messages from EVSEs. Timer starts with the sending of the first CM_START_ATTEN_CHAR.IND.";
val TT_EV_atten_results = time_scale*1.2*s;
Event evTT_EV_atten_results_timeout;

label table_a_1_15 title = "Timeout on EVSE side that trioggers the calculation of the average attenuation profile.";
val TT_EVSE_match_MNBC = time_scale*0.6*s;
Event evTT_EVSE_match_MNBC_timeout;

label table_a_1_16 title = "Maximum time from the expiration of TT_EVSE_match_MNBC and the reception of either CM_VALIDATE.REQ or CM_SLAC_MATCH.REQ";
val TT_EVSE_match_session = time_scale*10.0*s;
Event TT_EVSE_match_session_timeout;

label table_a_1_17 title = "Time between detecting state B and receiving CM_SLAC_PARM.REQ on the EVSE side.";
val TT_EVSE_SLAC_init = time_scale*50.0*s;
Event evTT_EVSE_SLAC_init_timeout;

label table_a_1_19 title = "Maximum time between CM_SLAC_MATCH.CNF and link establishment if there is no link after this timeout expires, EV retries matching process and EVSE resets its state machine.";
val TT_match_join = time_scale*12*s;
Event evTT_match_join_timeout;

label table_a_1_19 title = "Time that the EVSE/EV shall wait for a response from the EV/EVSE.";
val TT_match_response = time_scale*0.2*s;
Event evTT_match_response_timeout;

label table_a_1_18 title = "Time that the EV/EVSE shall wait for a request from the EV/EVSE.";
val TT_match_sequence = time_scale*0.4*s;
Event evTT_match_sequence_timeout;

label table_a_1_20 title = "Time duration for the repetition of the matching process when an error occurs.";
val TT_matching_repetition = time_scale*10*s;
Event evTT_matching_repetition_timeout;


label table_a_1_21 title = "Time to wait for a repetition of the whole matching process after a failed matching process.";
val TT_matching_rate = time_scale*0.4*s;
Event evTT_matching_rate_timeout;








