ControlPilotObserver_SamplingDelta = T_vald_detect_time / 10.0;
ControlPilotObserver_DetectStateThreshold =   as_int(T_vald_detect_time/ControlPilotObserver_SamplingDelta);

sm{
 signal_generator_controlpilot;
    
    Event evNextStep;
    states{Initial;
        for(i : 1 .. toggles ){
            as_identifier("B"+i);
            as_identifier("C"+i);
        }
        Finished; 
    };

    Actions{
        setStateB{ ControlPilotWireMeasure = 9.0;start_timer(time_delta,evNextStep);};
        setStateC{ ControlPilotWireMeasure = 6.0;start_timer(time_delta,evNextStep);};
    };

    t{Initial;B1;setStateB;};

    for(i : 1 .. toggles - 1 ){
        t{
            as_identifier("B"+i);
            as_identifier("C"+i);
            evNextStep;
            setStateC;};
        t{
            as_identifier("C"+i);
            as_identifier("B"+(i+1));
            evNextStep;
            setStateB;};
    }
    t{as_identifier("B"+toggles); Finished;};
};

//ControlPilotWireMeasure

Guard gBObserved;
Guard gCObserved;
gBObserved = in_state(ControlPilotObserver.Observe.B);
//gCObserved = in_state(ControlPilotObserver.Observe.C);
sm{
    SS;
    states{Initial;};
    Actions{
     doCheck{
            if (in_state(ControlPilotObserver.Observe.B)){
                //print("ABA\n");
            } else {
                //print("?????\n");
            }
        };
    };
    t{Initial;Initial;evControlPilotObserver_Measure;doCheck;};

};

Simulation{
 Start{controlpilot;signal_generator_controlpilot;ControlPilotObserver;SS;};
 
 start_timer(time_delta*2,evControlPilotObserverStart);
 start_timer(time_delta*6,evControlPilotObserverStop);
 start_timer(time_delta*10,evControlPilotObserverStart);
 start_timer(20.0*s,evControlPilotObserverStop);

};
