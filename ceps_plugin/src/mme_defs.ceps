/*
MIT License

Copyright (c) 2021 Tomas Prerovsky

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


/*
* Definition of management message types relevant for SLAC.
*/


// A message falls in one of the following four categories

val MME_REQ = 0;
val MME_CNF = 1;
val MME_IND = 2;
val MME_RSP = 3;

// Base encoding 

val CM_SLAC_PARM_BASE           = 0x6064;
val CM_SET_KEY_BASE             = 0x6008;
val CM_AMP_MAP_BASE             = 0x601C;
val CM_START_ATTEN_CHAR_BASE    = 0x6068;
val CM_ATTEN_CHAR_BASE          = 0x606C;
val CM_MNBC_SOUND_BASE          = 0x6074;
val CM_VALIDATE_BASE            = 0x6078;
val CM_SLAC_MATCH_BASE          = 0x607C;
val CM_ATTEN_PROFILE_BASE       = 0x6084;

// Base + category

val CM_SLAC_PARM_REQ            = CM_SLAC_PARM_BASE + MME_REQ;
val CM_SLAC_PARM_CNF            = CM_SLAC_PARM_BASE + MME_CNF;
val CM_START_ATTEN_CHAR_IND     = CM_START_ATTEN_CHAR_BASE + MME_IND;
val CM_MNBC_SOUND_IND           = CM_MNBC_SOUND_BASE + MME_IND;
val CM_ATTEN_CHAR_IND           = CM_ATTEN_CHAR_BASE + MME_IND;
val CM_ATTEN_PROFILE_IND        = CM_ATTEN_PROFILE_BASE + MME_IND;
val CM_ATTEN_CHAR_RSP           = CM_ATTEN_CHAR_BASE + MME_RSP;
val CM_VALIDATE_REQ             = CM_VALIDATE_BASE + MME_REQ;
val CM_VALIDATE_CNF             = CM_VALIDATE_BASE + MME_CNF;
val CM_SLAC_MATCH_REQ           = CM_SLAC_MATCH_BASE + MME_REQ;
val CM_SLAC_MATCH_CNF           = CM_SLAC_MATCH_BASE + MME_CNF;
val CM_SET_KEY_REQ              = CM_SET_KEY_BASE + MME_REQ;
val CM_SET_KEY_CNF              = CM_SET_KEY_BASE + MME_CNF;
val CM_AMP_MAP_REQ              = CM_AMP_MAP_BASE + MME_REQ;
val CM_AMP_MAP_CNF              = CM_AMP_MAP_BASE + MME_CNF;

mme{
    messages{
        cm_slac_parm_req; 
        cm_slac_parm_cnf; 
        cm_start_atten_char_ind; 
        cm_mnbc_sound_ind; 
        cm_atten_profile_ind;
        cm_atten_char_rsp; 
        cm_validate_req; 
        cm_validate_cnf; 
        cm_slac_match_req;
        cm_slac_match_cnf;
        cm_set_key_req;
        cm_amp_map_req;
        cm_amp_map_cnf; 
        cm_atten_char_ind;
    };
};

mme{
    handlers{
        for(e : root.mme.messages.content()){
            as_identifier("on_"+text(e));
        }
    };
};


val sm_mme_handler_test_debug = 0;
