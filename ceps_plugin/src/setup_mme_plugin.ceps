kind Event;
kind Guard;
Guard MMEPluginDebug;
Event evMMEPluginInitialized;

MMEPluginDebug = 0;

macro include_homeplug_mme_handler{

sm{
    map_mme_to_events;
    states{Initial;};
    on_enter{
        homeplug_mme_handler( 
            setup {
                communication{
                    port{2222;};
                    as_server{};
                };
                on_initplugin{
                    evMMEPluginInitialized;
                };
                on_start_tests{
                    evMMEPluginTestStarted;
                };
                on_end_tests{
                    evMMEPluginTestFinished;
                };
                run_tests{
                    all;
                };
                on_message{
                    if(CM_SLAC_PARM_REQ == mme_type){
                        on_mme_cm_slac_parm_eq{};
                    } 
                    else if(CM_SLAC_PARM_CNF == mme_type){
                        on_mme_cm_slac_parm_cnf{};
                    }
                    else if(CM_START_ATTEN_CHAR_IND == mme_type){
                        on_mme_cm_start_atten_char_ind{};
                    }
                    else if(CM_MNBC_SOUND_IND == mme_type){
                        on_mme_cm_mnbc_sound_ind{};
                    }else if(CM_ATTEN_PROFILE_IND == mme_type)
                    {
                        on_mme_cm_atten_profile_ind{};
                    }else if(CM_ATTEN_CHAR_RSP == mme_type)
                    {
                        on_mme_cm_atten_char_rsp{};
                    }else if(CM_VALIDATE_REQ == mme_type)
                    {
                        on_mme_cm_validate_req{};
                    }else if(CM_VALIDATE_CNF == mme_type)
                    {
                        on_mme_cm_validate_cnf{};
                    }else if(CM_SLAC_MATCH_REQ == mme_type)
                    {
                        on_mme_cm_slac_match_req{};
                    }else if(CM_SLAC_MATCH_CNF == mme_type)
                    {
                        on_mme_cm_slac_match_cnf{};
                    }else if(CM_SET_KEY_REQ == mme_type)
                    {
                        on_mme_cm_set_key_req{};
                    }else if(CM_SET_KEY_CNF == mme_type)
                    {
                        on_mme_cm_set_key_cnf{};
                    }else if(CM_AMP_MAP_REQ == mme_type)
                    {
                        on_mme_cm_amp_map_req{};                    
                    }else if(CM_AMP_MAP_CNF == mme_type)
                    {
                        on_mme_cm_amp_map_cnf{};
                    } else if ( CM_ATTEN_CHAR_IND == mme_type) {
                        on_mme_cm_atten_char_ind{};
                    }       
                };            
            } 
        );
    };

    Actions{
        onMMEPluginInitialized{
            print("MME Plugin ready\n");
        };
    };

    t{Initial;Initial;evMMEPluginInitialized;MMEPluginDebug;onMMEPluginInitialized;};
};
};

macro run_include_homeplug_mme_handler{
    Start{map_mme_to_events;};    
};